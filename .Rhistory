plot_ly(d,
x = carat,
y = price,
color = cut,
size = depth,
mode = "markers"
) %>% layout(title = "Diamond Prices")
est')
install.packages('wordcloud')
install.packes('tm')
install.packages('rvest')
install.packages('wordcloud')
install.packeges('tm')
install.packages('tm')
library(tm)
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Lecture/lecture-15-exercises/exercise-1')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
#Lets build a summary table!
buildSummary <- function(){
# require needed packages
library(dplyr)
library(knitr)
# read in needed files
crimeData <- read.csv('./data/CrimeData.csv')
incomeData <- read.csv('./data/IncomeData.csv')
educationData <- read.csv('./data/EducationData.csv')
# Filter down crimeData to only contain years that
# the report works with (1992 - 2010 even)
crimeData <- filter(crimeData, Year >= 1992) %>%
filter(Year <= 2010) %>%
filter(Year %% 2 != 1)
# Construct new DF to store values to report in the table.
# Build a year column to compare key facts against
tableReport <- select(crimeData, Year) %>%
distinct() %>%
filter(Year >= 1992) %>%
filter(Year <= 2010) %>%
filter(Year %% 2 != 1)
#lets get the max/min crime state
#DC is excluded because it is not represented in all three datasets
crimeMax <- crimeData %>% filter(Code != "DC") %>%
select(State, Year, Violent.Crime.rate) %>%
group_by(Year) %>%
filter(Violent.Crime.rate == max(Violent.Crime.rate))
crimeMin <- crimeData %>% filter(Code != "DC") %>%
select(State, Year, Violent.Crime.rate) %>%
group_by(Year) %>%
filter(Violent.Crime.rate == min(Violent.Crime.rate))
tableReport$CrimeMax <- crimeMax$State
tableReport$CrimeMin <- crimeMin$State
#lets get education max and min.
#Iman said we could do this btw
#basically the data frame was being weird, so each of these statements return the state
#but when mashed in a list or vector they return numbers, so this is the solution
education1 <- educationData %>% filter(x1992 == max(x1992)) %>% select(State)#newyork
education2 <- educationData %>% filter(x1994 == max(x1994)) %>% select(State)#newyork
education3 <- educationData %>% filter(x1996 == max(x1996)) %>% select(State)#newyork
education4 <- educationData %>% filter(x1998 == max(x1998)) %>% select(State)#massachusetts
education5 <- educationData %>% filter(x2000 == max(x2000)) %>% select(State)#ndakota
education6 <- educationData %>% filter(x2002 == max(x2002)) %>% select(State)#ndakota
education7 <- educationData %>% filter(x2004 == max(x2004)) %>% select(State)#sdakota
education8 <- educationData %>% filter(x2006 == max(x2006)) %>% select(State)#mississippi
education9 <- educationData %>% filter(x2008 == max(x2008)) %>% select(State)#mississippi
education10 <- educationData %>% filter(x2010 == max(x2010)) %>% select(State)#mississippi
educationMax <- c("New York", "New York", "New York", "Massachusetts", "North Dakota",
"North Dakota", "South Dakota", "Mississippi", "Mississippi", "Mississippi")
tableReport$EducationMax <- educationMax
educationMin1 <- educationData %>% filter(x1992 == min(x1992)) %>% select(State)#Nevada
educationMin2 <- educationData %>% filter(x1994 == min(x1994)) %>% select(State)#Alaska
educationMin3 <- educationData %>% filter(x1996 == min(x1996)) %>% select(State)#Nevada
educationMin4 <- educationData %>% filter(x1998 == min(x1998)) %>% select(State)#Nevada
educationMin5 <- educationData %>% filter(x2000 == min(x2000)) %>% select(State)#Utah
educationMin6 <- educationData %>% filter(x2002 == min(x2002)) %>% select(State)#Nevada
educationMin7 <- educationData %>% filter(x2004 == min(x2004)) %>% select(State)#Vermont
educationMin8 <- educationData %>% filter(x2006 == min(x2006)) %>% select(State)#Arizona
educationMin9 <- educationData %>% filter(x2008 == min(x2008)) %>% select(State)#Alaska
educationMin10 <- educationData %>% filter(x2010 == min(x2010)) %>% select(State)#Idaho
educationMin <- c("Nevada", "Alaska", "Nevada", "Nevada", "Utah", "Nevada", "Vermont",
"Arizona", "Alaska", "Idaho")
tableReport$EducationMin <- educationMin
#Here we go again, here we go again
in1 <- incomeData %>% filter(x1992 == max(x1992)) %>% select(code)#Hawaii
in2 <- incomeData %>% filter(x1994 == max(x1994)) %>% select(code)#Alaska
in3 <- incomeData %>% filter(x1996 == max(x1996)) %>% select(code)#Alaska
in4 <- incomeData %>% filter(x1998 == max(x1998)) %>% select(code)#Alaska
in5 <- incomeData %>% filter(x2000 == max(x2000)) %>% select(code)#Maryland
in6 <- incomeData %>% filter(x2002 == max(x2002)) %>% select(code)#Maryland
in7 <- incomeData %>% filter(x2004 == max(x2004)) %>% select(code)#Maryland
in8 <- incomeData %>% filter(x2006 == max(x2006)) %>% select(code)#New Jersey
in9 <- incomeData %>% filter(x2008 == max(x2008)) %>% select(code)#New Hampshire
in10 <- incomeData %>% filter(x2010 == max(x2010)) %>% select(code)#New Hampshire
incomeMax <- c("Hawaii", "Alaska", "Alaska", "Alaska", "Maryland", "Maryland", "Maryland",
"New Jersey", "New Hampshire", "New Hampshire")
tableReport$IncomeMax <- incomeMax
inmin1 <- incomeData %>% filter(x1992 == min(x1992)) %>% select(code)#wv
inmin2 <- incomeData %>% filter(x1994 == min(x1994)) %>% select(code)#wv
inmin3 <- incomeData %>% filter(x1996 == min(x1996)) %>% select(code)#nm
inmin4 <- incomeData %>% filter(x1998 == min(x1998)) %>% select(code)#wv
inmin5 <- incomeData %>% filter(x2000 == min(x2000)) %>% select(code)#wv
inmin6 <- incomeData %>% filter(x2002 == min(x2002)) %>% select(code)#wv
inmin7 <- incomeData %>% filter(x2004 == min(x2004)) %>% select(code)#wv
inmin8 <- incomeData %>% filter(x2006 == min(x2006)) %>% select(code)#ms
inmin9 <- incomeData %>% filter(x2008 == min(x2008)) %>% select(code)#ms
inmin10 <- incomeData %>% filter(x2010 == min(x2010)) %>% select(code)#ms
incomeMin<- c("West Virginia", "West Virginia", "New Mexico", "West Virginia", "West Virginia",
"West Virginia", "West Virginia", "Mississippi", "Mississippi", "Mississippi")
tableReport$IncomeMin <- incomeMin
kable(tableReport)
}
buildSummary()
setwd("~/Documents/UW/Winter 2016/INFO498F/Final/Group-Project")
buildSummary()
shiny::runApp()
shiny::runApp()
#Lets build a summary table!
buildSummary <- function(){
# require needed packages
library(dplyr)
library(knitr)
# read in needed files
crimeData <- read.csv('./data/CrimeData.csv')
incomeData <- read.csv('./data/IncomeData.csv')
educationData <- read.csv('./data/EducationData.csv')
# Filter down crimeData to only contain years that
# the report works with (1992 - 2010 even)
crimeData <- filter(crimeData, Year >= 1992) %>%
filter(Year <= 2010) %>%
filter(Year %% 2 != 1)
# Construct new DF to store values to report in the table.
# Build a year column to compare key facts against
tableReport <- select(crimeData, Year) %>%
distinct() %>%
filter(Year >= 1992) %>%
filter(Year <= 2010) %>%
filter(Year %% 2 != 1)
#lets get the max/min crime state
#DC is excluded because it is not represented in all three datasets
crimeMax <- crimeData %>% filter(Code != "DC") %>%
select(State, Year, Violent.Crime.rate) %>%
group_by(Year) %>%
filter(Violent.Crime.rate == max(Violent.Crime.rate))
crimeMin <- crimeData %>% filter(Code != "DC") %>%
select(State, Year, Violent.Crime.rate) %>%
group_by(Year) %>%
filter(Violent.Crime.rate == min(Violent.Crime.rate))
tableReport$CrimeMax <- crimeMax$State
tableReport$CrimeMin <- crimeMin$State
#lets get education max and min.
#Iman said we could do this btw
#basically the data frame was being weird, so each of these statements return the state
#but when mashed in a list or vector they return numbers, so this is the solution
education1 <- educationData %>% filter(x1992 == max(x1992)) %>% select(State)#newyork
education2 <- educationData %>% filter(x1994 == max(x1994)) %>% select(State)#newyork
education3 <- educationData %>% filter(x1996 == max(x1996)) %>% select(State)#newyork
education4 <- educationData %>% filter(x1998 == max(x1998)) %>% select(State)#massachusetts
education5 <- educationData %>% filter(x2000 == max(x2000)) %>% select(State)#ndakota
education6 <- educationData %>% filter(x2002 == max(x2002)) %>% select(State)#ndakota
education7 <- educationData %>% filter(x2004 == max(x2004)) %>% select(State)#sdakota
education8 <- educationData %>% filter(x2006 == max(x2006)) %>% select(State)#mississippi
education9 <- educationData %>% filter(x2008 == max(x2008)) %>% select(State)#mississippi
education10 <- educationData %>% filter(x2010 == max(x2010)) %>% select(State)#mississippi
educationMax <- c("New York", "New York", "New York", "Massachusetts", "North Dakota",
"North Dakota", "South Dakota", "Mississippi", "Mississippi", "Mississippi")
tableReport$EducationMax <- educationMax
educationMin1 <- educationData %>% filter(x1992 == min(x1992)) %>% select(State)#Nevada
educationMin2 <- educationData %>% filter(x1994 == min(x1994)) %>% select(State)#Alaska
educationMin3 <- educationData %>% filter(x1996 == min(x1996)) %>% select(State)#Nevada
educationMin4 <- educationData %>% filter(x1998 == min(x1998)) %>% select(State)#Nevada
educationMin5 <- educationData %>% filter(x2000 == min(x2000)) %>% select(State)#Utah
educationMin6 <- educationData %>% filter(x2002 == min(x2002)) %>% select(State)#Nevada
educationMin7 <- educationData %>% filter(x2004 == min(x2004)) %>% select(State)#Vermont
educationMin8 <- educationData %>% filter(x2006 == min(x2006)) %>% select(State)#Arizona
educationMin9 <- educationData %>% filter(x2008 == min(x2008)) %>% select(State)#Alaska
educationMin10 <- educationData %>% filter(x2010 == min(x2010)) %>% select(State)#Idaho
educationMin <- c("Nevada", "Alaska", "Nevada", "Nevada", "Utah", "Nevada", "Vermont",
"Arizona", "Alaska", "Idaho")
tableReport$EducationMin <- educationMin
#Here we go again, here we go again
in1 <- incomeData %>% filter(x1992 == max(x1992)) %>% select(code)#Hawaii
in2 <- incomeData %>% filter(x1994 == max(x1994)) %>% select(code)#Alaska
in3 <- incomeData %>% filter(x1996 == max(x1996)) %>% select(code)#Alaska
in4 <- incomeData %>% filter(x1998 == max(x1998)) %>% select(code)#Alaska
in5 <- incomeData %>% filter(x2000 == max(x2000)) %>% select(code)#Maryland
in6 <- incomeData %>% filter(x2002 == max(x2002)) %>% select(code)#Maryland
in7 <- incomeData %>% filter(x2004 == max(x2004)) %>% select(code)#Maryland
in8 <- incomeData %>% filter(x2006 == max(x2006)) %>% select(code)#New Jersey
in9 <- incomeData %>% filter(x2008 == max(x2008)) %>% select(code)#New Hampshire
in10 <- incomeData %>% filter(x2010 == max(x2010)) %>% select(code)#New Hampshire
incomeMax <- c("Hawaii", "Alaska", "Alaska", "Alaska", "Maryland", "Maryland", "Maryland",
"New Jersey", "New Hampshire", "New Hampshire")
tableReport$IncomeMax <- incomeMax
inmin1 <- incomeData %>% filter(x1992 == min(x1992)) %>% select(code)#wv
inmin2 <- incomeData %>% filter(x1994 == min(x1994)) %>% select(code)#wv
inmin3 <- incomeData %>% filter(x1996 == min(x1996)) %>% select(code)#nm
inmin4 <- incomeData %>% filter(x1998 == min(x1998)) %>% select(code)#wv
inmin5 <- incomeData %>% filter(x2000 == min(x2000)) %>% select(code)#wv
inmin6 <- incomeData %>% filter(x2002 == min(x2002)) %>% select(code)#wv
inmin7 <- incomeData %>% filter(x2004 == min(x2004)) %>% select(code)#wv
inmin8 <- incomeData %>% filter(x2006 == min(x2006)) %>% select(code)#ms
inmin9 <- incomeData %>% filter(x2008 == min(x2008)) %>% select(code)#ms
inmin10 <- incomeData %>% filter(x2010 == min(x2010)) %>% select(code)#ms
incomeMin<- c("West Virginia", "West Virginia", "New Mexico", "West Virginia", "West Virginia",
"West Virginia", "West Virginia", "Mississippi", "Mississippi", "Mississippi")
tableReport$IncomeMin <- incomeMin
return(tableReport)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Cross Analysis is a program that runs linear analysis between two of three data sets for a state or America as a whole.
# It takes a state code and two data sets and returns a graphic with informaiton as to the relationship between the
# two data sets
CrossAnalysis <- function(stateChoice, dataChoice1, dataChoice2){
library(plotly)
library(dplyr)
# State choice should be in code form but can inclued TOT for total.
# Get all years we will be doing the time analysis for.
years <- c("1992", "1994", "1996", "1998", "2000", "2002", "2004", "2006", "2008", "2010")
yearsnum <- c(1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010)
# Set general size
DotSize <- 10
# Aquire the appropriate data
returnSet <- c()
if (stateChoice == "TOT"){
#Using this one boolean this logic tree assigns data sets and axis names to general terms that can be manipulated later
gotIt <- FALSE
if (dataChoice1 == "Crime" | dataChoice2 == "Crime") {
data1 <- read.csv("./data/normalCrime.csv") %>% select(Year, mean)
yaxe <- "Violent Crime Rate"
gotIt <- TRUE
}
if (dataChoice1 == "Education" | dataChoice2 == "Education") {
if (gotIt){
# In the possible end branches the data is also fit
data2 <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
AnalysisFit <- lm(data1[,2] ~ data2[,2])
xaxe <- "Education Score"
} else {
data1 <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
yaxe <- "Education Score"
}
}
if (dataChoice1 == "Income" | dataChoice2 == "Income") {
# In the possible end branches the data is also fit
data2 <- read.csv("./data/normalIncome.csv") %>% select(Year, mean)
AnalysisFit <- lm(data1[,2] ~ data2[,2])
xaxe <- "Median Income"
}
# Build names for the legend that include the slope so that the user can see the actual number on the graph
FitName <- paste("Fit: m =", round(AnalysisFit$coefficients[2], digits = 4))
DatName <- paste(dataChoice1, "vs", dataChoice2)
# Now we build a plot using the generic data and names and apply the fit.
plot_ly(x = data2[,2], y = data1[,2], mode = "markers", name = DatName, marker = list(color = "red", size = DotSize)) %>% layout(xaxis = list(title = xaxe), yaxis = list(title = yaxe)) %>% add_trace(y = fitted(AnalysisFit), mode = "line", name = FitName, line = list(color = "black"), marker = list(color = "black")) %>% return()
} else {
#Using this one boolean this logic tree assigns data sets and axis names to general terms that can be manipulated later
gotIt <- FALSE
if (dataChoice1 == "Crime" | dataChoice2 == "Crime") {
data1 <- read.csv("./data/CrimeData.csv") %>% filter(State != "Total", Year %in% years, Code == stateChoice) %>% select(Year, Violent.Crime.rate)
data1 <- data1[,2]
yaxe <- "Violent Crime Rate"
gotIt <- TRUE
}
if (dataChoice1 == "Education" | dataChoice2 == "Education") {
if (gotIt){
# In the possible end branches the data is also fit
data2 <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
data2 <- unlist(data2[1,1:length(data2[1,]) - 1])
AnalysisFit <- lm(data1 ~ data2)
xaxe <- "Education Score"
} else {
data1 <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
data1 <- unlist(data1[1,1:length(data1[1,]) - 1])
yaxe <- "Education Score"
}
}
if (dataChoice1 == "Income" | dataChoice2 == "Income") {
# In the possible end branches the data is also fit
data2 <- read.csv("./data/IncomeRebuild.csv") %>% filter(code == stateChoice) %>% select(-x2012, -X)
data2 <- rev(unlist(data2[1,2:length(data2[1,])]))
AnalysisFit <- lm(data1 ~ data2)
xaxe <- "Median Income"
}
# Build names for the legend that include the slope so that the user can see the actual number on the graph
FitName <- paste("Fit: m =", round(AnalysisFit$coefficients[2], digits = 4))
DatName <- paste(dataChoice1, "vs", dataChoice2)
# Now we build a plot using the generic data and names and apply the fit.
plot_ly(x = data2, y = data1, mode = "markers", name = DatName, marker = list(color = "red", size = DotSize)) %>% layout(xaxis = list(title = xaxe), yaxis = list(title = yaxe)) %>% add_trace(y = fitted(AnalysisFit), mode = "line", name = FitName, line = list(color = "black"), marker = list(color = "black")) %>% return()
}
}
CrossAnalysis('WA', 'Crime', 'Education')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
CrossAnalysis('WA', 'Crime', 'Crime')
CrossAnalysis('WA', 'Crime', 'Income')
CrossAnalysis('WA', 'Crime', 'Income')
# Cross Analysis is a program that runs linear analysis between two of three data sets for a state or America as a whole.
# It takes a state code and two data sets and returns a graphic with informaiton as to the relationship between the
# two data sets
CrossAnalysis <- function(stateChoice, dataChoice1, dataChoice2){
library(plotly)
library(dplyr)
# State choice should be in code form but can inclued TOT for total.
# Get all years we will be doing the time analysis for.
years <- c("1992", "1994", "1996", "1998", "2000", "2002", "2004", "2006", "2008", "2010")
yearsnum <- c(1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010)
# Set general size
DotSize <- 10
# Aquire the appropriate data
returnSet <- c()
if (stateChoice == "TOT"){
#Using this one boolean this logic tree assigns data sets and axis names to general terms that can be manipulated later
gotIt <- FALSE
if (dataChoice1 == "Crime" | dataChoice2 == "Crime") {
data1 <- read.csv("./data/normalCrime.csv") %>% select(Year, mean)
yaxe <- "Violent Crime Rate"
gotIt <- TRUE
}
if (dataChoice1 == "Education" | dataChoice2 == "Education") {
if (gotIt){
# In the possible end branches the data is also fit
data2 <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
AnalysisFit <- lm(data1[,2] ~ data2[,2])
xaxe <- "Education Score"
} else {
data1 <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
yaxe <- "Education Score"
}
}
if (dataChoice1 == "Income" | dataChoice2 == "Income") {
# In the possible end branches the data is also fit
data2 <- read.csv("./data/normalIncome.csv") %>% select(Year, mean)
AnalysisFit <- lm(data1[,2] ~ data2[,2])
xaxe <- "Median Income"
}
# Build names for the legend that include the slope so that the user can see the actual number on the graph
FitName <- paste("Fit: m =", round(AnalysisFit$coefficients[2], digits = 4))
DatName <- paste(dataChoice1, "vs", dataChoice2)
# Now we build a plot using the generic data and names and apply the fit.
plot_ly(x = data2[,2], y = data1[,2], mode = "markers", name = DatName, marker = list(color = "red", size = DotSize)) %>% layout(xaxis = list(title = xaxe), yaxis = list(title = yaxe)) %>% add_trace(y = fitted(AnalysisFit), mode = "line", name = FitName, line = list(color = "black"), marker = list(color = "black")) %>% return()
} else {
#Using this one boolean this logic tree assigns data sets and axis names to general terms that can be manipulated later
gotIt <- FALSE
if (dataChoice1 == "Crime" | dataChoice2 == "Crime") {
data1 <- read.csv("./data/CrimeData.csv") %>% filter(State != "Total", Year %in% years, Code == stateChoice) %>% select(Year, Violent.Crime.rate)
data1 <- data1[,2]
yaxe <- "Violent Crime Rate"
gotIt <- TRUE
}
if (dataChoice1 == "Education" | dataChoice2 == "Education") {
if (gotIt){
# In the possible end branches the data is also fit
data2 <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
data2 <- unlist(data2[1,1:length(data2[1,]) - 1])
AnalysisFit <- lm(data1 ~ data2)
xaxe <- "Education Score"
} else {
data1 <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
data1 <- unlist(data1[1,1:length(data1[1,]) - 1])
yaxe <- "Education Score"
}
}
if (dataChoice1 == "Income" | dataChoice2 == "Income") {
# In the possible end branches the data is also fit
data2 <- read.csv("./data/IncomeData.csv") %>% filter(code == stateChoice) %>% select(-x2012, -X)
data2 <- rev(unlist(data2[1,2:length(data2[1,])]))
AnalysisFit <- lm(data1 ~ data2)
xaxe <- "Median Income"
}
# Build names for the legend that include the slope so that the user can see the actual number on the graph
FitName <- paste("Fit: m =", round(AnalysisFit$coefficients[2], digits = 4))
DatName <- paste(dataChoice1, "vs", dataChoice2)
# Now we build a plot using the generic data and names and apply the fit.
plot_ly(x = data2, y = data1, mode = "markers", name = DatName, marker = list(color = "red", size = DotSize)) %>% layout(xaxis = list(title = xaxe), yaxis = list(title = yaxe)) %>% add_trace(y = fitted(AnalysisFit), mode = "line", name = FitName, line = list(color = "black"), marker = list(color = "black")) %>% return()
}
}
CrossAnalysis('WA', 'Crime', 'Income')
CrossAnalysis('WA', 'Income', 'Income')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Cross Analysis is a program that runs linear analysis between two of three data sets for a state or America as a whole.
# It takes a state code and a combo tag and returns a graphic with informaiton as to the relationship between the
# two data sets
CrossAnalysis <- function(stateChoice, comboCode){
library(plotly)
library(dplyr)
# State choice should be in code form but can inclued TOT for total.
# input it split into two useable strings this maintains some of the codes generality.
if (comboCode == "Crime-Income"){
dataChoice1 = "Crime"
dataChoice2 = "Income"
} else if (comboCode == "Income-Education") {
dataChoice1 = "Income"
dataChoice2 = "Education"
} else {
dataChoice1 = "Education"
dataChoice2 = "Crime"
}
# Get all years we will be doing the time analysis for.
years <- c("1992", "1994", "1996", "1998", "2000", "2002", "2004", "2006", "2008", "2010")
yearsnum <- c(1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010)
# Set general size
DotSize <- 10
# Aquire the appropriate data
returnSet <- c()
if (stateChoice == "TOT"){
#Using this one boolean this logic tree assigns data sets and axis names to general terms that can be manipulated later
gotIt <- FALSE
if (dataChoice1 == "Crime" | dataChoice2 == "Crime") {
data1 <- read.csv("./data/normalCrime.csv") %>% select(Year, mean)
yaxe <- "Violent Crime Rate"
gotIt <- TRUE
}
if (dataChoice1 == "Education" | dataChoice2 == "Education") {
if (gotIt){
# In the possible end branches the data is also fit
data2 <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
AnalysisFit <- lm(data1[,2] ~ data2[,2])
xaxe <- "Education Score"
} else {
data1 <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
yaxe <- "Education Score"
}
}
if (dataChoice1 == "Income" | dataChoice2 == "Income") {
# In the possible end branches the data is also fit
data2 <- read.csv("./data/normalIncome.csv") %>% select(Year, mean)
AnalysisFit <- lm(data1[,2] ~ data2[,2])
xaxe <- "Median Income"
}
# Build names for the legend that include the slope so that the user can see the actual number on the graph
FitName <- paste("Fit: m =", round(AnalysisFit$coefficients[2], digits = 4))
DatName <- paste(dataChoice1, "vs", dataChoice2)
# Now we build a plot using the generic data and names and apply the fit.
plot_ly(x = data2[,2], y = data1[,2], mode = "markers", name = DatName, marker = list(color = "red", size = DotSize)) %>% layout(xaxis = list(title = xaxe), yaxis = list(title = yaxe)) %>% add_trace(y = fitted(AnalysisFit), mode = "line", name = FitName, line = list(color = "black"), marker = list(color = "black")) %>% return()
} else {
#Using this one boolean this logic tree assigns data sets and axis names to general terms that can be manipulated later
gotIt <- FALSE
if (dataChoice1 == "Crime" | dataChoice2 == "Crime") {
data1 <- read.csv("./data/CrimeData.csv") %>% filter(State != "Total", Year %in% years, Code == stateChoice) %>% select(Year, Violent.Crime.rate)
data1 <- data1[,2]
yaxe <- "Violent Crime Rate"
gotIt <- TRUE
}
if (dataChoice1 == "Education" | dataChoice2 == "Education") {
if (gotIt){
# In the possible end branches the data is also fit
data2 <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
data2 <- unlist(data2[1,1:length(data2[1,]) - 1])
AnalysisFit <- lm(data1 ~ data2)
xaxe <- "Education Score"
} else {
data1 <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
data1 <- unlist(data1[1,1:length(data1[1,]) - 1])
yaxe <- "Education Score"
}
}
if (dataChoice1 == "Income" | dataChoice2 == "Income") {
# In the possible end branches the data is also fit
data2 <- read.csv("./data/IncomeData.csv") %>% filter(code == stateChoice) %>% select(-x2012, -X)
data2 <- rev(unlist(data2[1,2:length(data2[1,])]))
AnalysisFit <- lm(data1 ~ data2)
xaxe <- "Median Income"
}
# Build names for the legend that include the slope so that the user can see the actual number on the graph
FitName <- paste("Fit: m =", round(AnalysisFit$coefficients[2], digits = 4))
DatName <- paste(dataChoice1, "vs", dataChoice2)
# Now we build a plot using the generic data and names and apply the fit.
plot_ly(x = data2, y = data1, mode = "markers", name = DatName, marker = list(color = "red", size = DotSize)) %>% layout(xaxis = list(title = xaxe), yaxis = list(title = yaxe)) %>% add_trace(y = fitted(AnalysisFit), mode = "line", name = FitName, line = list(color = "black"), marker = list(color = "black")) %>% return()
}
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(gtk)
install.packages("RGtk2")
shiny::runApp()
shiny::runApp()
