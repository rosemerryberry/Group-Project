landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("gray85"),
countrycolor = toRGB('gray85')
)
### Bonus: create informative hover text ###
# Create graph
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Crowdsourced Police Shootings', geo = g)
library(jsonlite)
library(dplyr)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("gray85"),
countrycolor = toRGB('gray85')
)
### Bonus: create informative hover text ###
# Create graph
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Crowdsourced Police Shootings', geo = g)
library(jsonlite)
library(dplyr)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("blue"),
countrycolor = toRGB('gray85')
)
### Bonus: create informative hover text ###
# Create graph
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Crowdsourced Police Shootings', geo = g)
library(jsonlite)
library(dplyr)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("black"),
countrycolor = toRGB('gray85')
)
### Bonus: create informative hover text ###
# Create graph
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Crowdsourced Police Shootings', geo = g)
library(jsonlite)
library(dplyr)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("black"),
countrycolor = toRGB('gray85')
)
### Bonus: create informative hover text ###
# Create graph
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/3, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Police Shootings', geo = g)
library(jsonlite)
library(dplyr)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("black"),
countrycolor = toRGB('gray85')
)
### Bonus: create informative hover text ###
# Create graph
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/4, opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Police Shootings', geo = g)
library(jsonlite)
library(dplyr)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 0,
subunitcolor = toRGB("black"),
countrycolor = toRGB('gray85')
)
### Bonus: create informative hover text ###
# Create graph
plot_ly(data,
lon = lng,
lat = lat,
text = paste('<b>Name:</b>', data[,"Victim Name"], '<br><b>Shots Fired:</b>', data$shots_fired),
hoverinfo = 'text',
marker = list(size = 1 + shots_fired/4, opacity = .4, color = 'blue'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = 'Police Shootings', geo = g)
View(data)
View(data)
avg_shots <- mean(data$shots_fired)
library(plotly)
library(dplyr)
# Randomly sample 1,000 rows from the `diamonds` dataframe
d <- diamonds[sample(nrow(diamonds), 1000), ]
# Create a graph with the following encodings:
# carat: horizontal position,
# price: vertical position,
# cut: color
plot_ly(d,
x = depth,
y = price,
color = cut,
size = depth^2,
mode = "markers"
)
layout(d, title = "stuff")
plot_ly(d,
x = carat,
y = price,
color = cut,
size = depth^2,
mode = "markers"
)
) %>% layout(title = "Diamond Prices")
plot_ly(d,
x = carat,
y = price,
color = cut,
size = depth^2,
mode = "markers"
) %>% layout(title = "Diamond Prices")
plot_ly(d,
x = dpeth,
y = table,
size = depth^2,
mode = "markers",
) %>% layout(title = "Depth VS Table")
plot_ly(d,
x = depth,
y = table,
size = depth^2,
mode = "markers",
) %>% layout(title = "Depth VS Table")
plot_ly(d,
x = depth,
y = table,
color = cut,
size = depth^2,
mode = "markers",
) %>% layout(title = "Depth VS Table")
plot_ly(d,
x = depth,
y = table,
color = cut,
size = depth^2,
mode = "markers"
) %>% layout(title = "Depth VS Table")
plot_ly(d,
x = carat,
y = price,
color = cut,
size = depth^2,
mode = "markers"
) %>% layout(title = "Diamond Prices")
View(d)
View(d)
plot_ly(d,
x = carat,
y = price,
color = cut,
size = 4,
mode = "markers"
) %>% layout(title = "Diamond Prices")
plot_ly(d,
x = carat,
y = price,
color = cut,
size = .1,
mode = "markers"
) %>% layout(title = "Diamond Prices")
plot_ly(d,
x = carat,
y = price,
color = cut,
size = depth,
mode = "markers"
) %>% layout(title = "Diamond Prices")
plot_ly(d,
x = depth,
y = table,
color = cut,
size = price,
mode = "markers"
) %>% layout(title = "Depth VS Table")
plot_ly(d,
x = depth,
y = table,
color = cut,
size = price,
mode = "markers"
) %>% layout(title = "Depth VS Table")
plot_ly(d,
x = depth,
y = table,
type = "box",
color = cut,
size = price,
mode = "markers"
) %>% layout(title = "Depth VS Table")
ibrary(plotly)
library(dplyr)
# Randomly sample 1,000 rows from the `diamonds` dataframe
d <- diamonds[sample(nrow(diamonds), 1000), ]
# Create a graph with the following encodings:
# carat: horizontal position,
# price: vertical position,
# cut: color
plot_ly(d,
x = carat,
y = price,
color = cut,
size = depth,
mode = "markers"
) %>% layout(title = "Diamond Prices")
est')
install.packages('wordcloud')
install.packes('tm')
install.packages('rvest')
install.packages('wordcloud')
install.packeges('tm')
install.packages('tm')
library(tm)
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Lecture/lecture-15-exercises/exercise-1')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
shiny::runApp('Documents/UW/Winter 2016/INFO498F/Final/Group-Project')
setwd("~/Documents/UW/Winter 2016/INFO498F/Final/Group-Project")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Keagan Moo
# 2/28/2016
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sliderInput("eduYear", label = h3("Year"), min = 1992,
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
