# Time Analysis is a function that takes in a state of choice and interrogates our crime, income, and
# education data sets in order to build a linear regression statistical test for each topic. It returns
# the statistical information related to these tests and graphs that represent them.
TimeAnalysis <- function(stateChoice){
library(plotly)
# State choice should be in code form but can inclued TOT for total.
# Get all years we will be doing the time analysis for.
years <- c("1992", "1994", "1996", "1998", "2000", "2002", "2004", "2006", "2008", "2010")
yearsnum <- c(1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010)
# Aquire the appropriate data
returnSet <- c()
if (stateChoice == "TOT"){
crimeData <- read.csv("./data/normalCrime.csv") %>% select(Year, mean)
educationData <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
incomeData <- read.csv("./data/normalIncome.csv") %>% select(Year, mean)
# Now we fit the data using the statistics inherent to R
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edufit <- lm(educationData[,2] ~ educationData[,1])
incomefit <- lm(incomeData[,2] ~ incomeData[,1])
returnSet$crimeGraphic <- plot_ly(x = crimeData[,1], y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = educationData[,1], y = educationData[,2], mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = incomeData[,1], y = incomeData[,2], mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
} else {
crimeData <- read.csv("./data/CrimeData.csv") %>% filter(State != "Total", Year %in% years, Code == stateChoice) %>% select(Year, Violent.Crime.rate)
educationData <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
incomeData <- read.csv("./data/IncomeRebuild.csv") %>% filter(code == stateChoice) %>% select(-x2012, -X)
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edudat <- unlist(educationData[1,1:length(incomeData[1,]) - 1])
edufit <- lm(edudat ~ yearsnum)
incomedat <- rev(unlist(incomeData[1,2:length(incomeData[1,])]))
incomefit <- lm(incomedat ~ yearsnum)
returnSet$crimeGraphic <- plot_ly(x = yearsnum, y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = yearsnum, y = edudat, mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = yearsnum, y = incomedat, mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
}
returnSet$crimeCoeff <- crimefit$coefficients
returnSet$crimeP <- summary(crimefit)$coefficients[2,4]
returnSet$eduCoeff <- edufit$coefficients
returnSet$eduP <- summary(edufit)$coefficients[2,4]
returnSet$incomeCoeff <- incomefit$coefficients
returnSet$incomeP <- summary(incomefit)$coefficients[2,4]
return(returnSet)
}
TimeAnalysis('Utah')
TimeAnalysis()
TimeAnalysis('Iowa')
TimeAnalysis('AL')
shiny::runApp()
TimeAnalysis('TOT')
TimeAnalysis('WA')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/Documents/UW/Winter 2016/INFO498F/Final/Group-Project/scripts/BuildHistogram.R', echo=TRUE)
#Deep Data Histogram
#wishmeluck
require(dplyr)
require(plotly)
require(RColorBrewer)
BuildHistogram <- function(data_type, year, stateOne, stateTwo, stateThree){
edf <- read.csv("./data/EducationData.csv")
cdf <- read.csv("./data/CrimeData.csv")
idf <- read.csv("./data/IncomeRebuild.csv")
#For Changing to xDATE format
yearChoiceX <- paste0("x", year)
#Conditionals for the dataset read in.
if (data_type == "Income") {
df <- filter(code == stateOne| code == stateTwo| code == stateThree ) %>%
select(idf, year)
} else if (data_type == "Education") {
df <- filter(code = stateOne| code == stateTwo | code == stateThree) %>%
select(edf, year)
} else if (data_type == "Crime") {
df <- filter(Code == stateOne| Code == stateTwo| Code == stateThree, year) %>%
select(cdf, Violent.Crime.rate)
colnames(df) <- yearChoiceX
}
#Ploting Bar Chart
plot_ly(df, y = eval(parse(text=yearChoiceX)), type = "bar")
###########TEST######
######################
}
BuildHistogram('Income', 1996, 'WA', 'UT, 'AL')
BuildHistogram('Income', '1996', 'WA', 'UT, 'AL')
BuildHistogram('Income', '1996', 'WA', 'UT', 'AL')
BuildHistogram('Income', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Income2', 1996, 'WA', 'UT', 'AL')
shiny::runApp()
shiny::runApp()
shiny::runApp()
BuildHistogram('Income', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Income', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Income45', 1996, 'WA', 'UT', 'AL')
#Deep Data Histogram
#wishmeluck
require(dplyr)
require(plotly)
require(RColorBrewer)
BuildHistogram <- function(data_type, year, stateOne, stateTwo, stateThree){
edf <- read.csv("./data/EducationData.csv")
cdf <- read.csv("./data/CrimeData.csv")
idf <- read.csv("./data/IncomeRebuild.csv")
#For Changing to xDATE format
yearChoiceX <- paste0("x", year)
#Conditionals for the dataset read in.
if (data_type == "Income") {
df <- filter(code == stateOne| code == stateTwo| code == stateThree ) %>%
select(idf, year)
} else if (data_type == "Education") {
df <- filter(code = stateOne| code == stateTwo | code == stateThree) %>%
select(edf, year)
} else if (data_type == "Crime") {
df <- filter(Code == stateOne| Code == stateTwo| Code == stateThree, year) %>%
select(cdf, Violent.Crime.rate)
colnames(df) <- yearChoiceX
}
#Ploting Bar Chart
plot_ly(df, y = eval(parse(text=yearChoiceX)), type = "bar")
###########TEST######
######################
}
BuildHistogram('Income', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Speaking', 1996, 'WA', 'UT', 'AL')
BuildHistogram('income45', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Income45', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Income', 1996, 'WA', 'UT', 'AL')
TimeAnalysis <- function(stateChoice){
library(plotly)
# State choice should be in code form but can inclued TOT for total.
# Get all years we will be doing the time analysis for.
years <- c("1992", "1994", "1996", "1998", "2000", "2002", "2004", "2006", "2008", "2010")
yearsnum <- c(1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010)
# Aquire the appropriate data
returnSet <- c()
if (stateChoice == "TOT"){
crimeData <- read.csv("./data/normalCrime.csv") %>% select(Year, mean)
educationData <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
incomeData <- read.csv("./data/normalIncome.csv") %>% select(Year, mean)
# Now we fit the data using the statistics inherent to R
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edufit <- lm(educationData[,2] ~ educationData[,1])
incomefit <- lm(incomeData[,2] ~ incomeData[,1])
returnSet$crimeGraphic <- plot_ly(x = crimeData[,1], y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = educationData[,1], y = educationData[,2], mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = incomeData[,1], y = incomeData[,2], mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
} else {
crimeData <- read.csv("./data/CrimeData.csv") %>% filter(State != "Total", Year %in% years, Code == stateChoice) %>% select(Year, Violent.Crime.rate)
educationData <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
incomeData <- read.csv("./data/IncomeRebuild.csv") %>% filter(code == stateChoice) %>% select(-x2012, -X)
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edudat <- unlist(educationData[1,1:length(incomeData[1,]) - 1])
edufit <- lm(edudat ~ yearsnum)
incomedat <- rev(unlist(incomeData[1,2:length(incomeData[1,])]))
incomefit <- lm(incomedat ~ yearsnum)
returnSet$crimeGraphic <- plot_ly(x = yearsnum, y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = yearsnum, y = edudat, mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = yearsnum, y = incomedat, mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = "Fit Line", line = list(color = "black"), marker = list(color = "black"))
}
returnSet$crimeCoeff <- crimefit$coefficients
returnSet$crimeP <- summary(crimefit)$coefficients[2,4]
returnSet$eduCoeff <- edufit$coefficients
returnSet$eduP <- summary(edufit)$coefficients[2,4]
returnSet$incomeCoeff <- incomefit$coefficients
returnSet$incomeP <- summary(incomefit)$coefficients[2,4]
return(returnSet)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
#Deep Data Histogram
#wishmeluck
require(dplyr)
require(plotly)
require(RColorBrewer)
BuildHistogram <- function(data_type, year, stateOne, stateTwo, stateThree){
edf <- read.csv("./data/EducationData.csv")
cdf <- read.csv("./data/CrimeData.csv")
idf <- read.csv("./data/IncomeRebuild.csv")
#For Changing to xDATE format
yearChoiceX <- paste0("x", year)
#Conditionals for the dataset read in.
if (data_type == "Income") {
df <- filter(idf, code == stateOne| code == stateTwo| code == stateThree ) %>%
select(year)
} else if (data_type == "Education") {
df <- filter(edf, code = stateOne| code == stateTwo | code == stateThree) %>%
select(year)
} else if (data_type == "Crime") {
df <- filter(cdf, Code == stateOne| Code == stateTwo| Code == stateThree, year) %>%
select(Violent.Crime.rate)
colnames(df) <- yearChoiceX
}
#Ploting Bar Chart
plot_ly(df, y = eval(parse(text=yearChoiceX)), type = "bar")
###########TEST######
######################
}
BuildHistogram('Income', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Speaking', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Speaking', 1996, 'WA', 'UT', 'AL')
BuildHistogram('Income', 1996, 'WA', 'UT', 'AL')
require(dplyr)
require(plotly)
require(RColorBrewer)
BuildHistogram <- function(data_type, year, stateOne, stateTwo, stateThree){
edf <- read.csv("./data/EducationData.csv")
cdf <- read.csv("./data/CrimeData.csv")
idf <- read.csv("./data/IncomeRebuild.csv")
#For Changing to xDATE format
yearChoiceX <- paste0("x", year)
#Conditionals for the dataset read in.
if (data_type == "Income") {
df <- filter(idf, code == stateOne| code == stateTwo| code == stateThree ) %>%
select(year)
} else if (data_type == "Education") {
df <- filter(edf, code = stateOne| code == stateTwo | code == stateThree) %>%
select(year)
} else if (data_type == "Crime") {
df <- filter(cdf, Code == stateOne| Code == stateTwo| Code == stateThree, year) %>%
select(Violent.Crime.rate)
colnames(df) <- yearChoiceX
} else {
return (0);
}
#Ploting Bar Chart
plot_ly(df, y = eval(parse(text=yearChoiceX)), type = "bar")
###########TEST######
######################
}
BuildHistogram('Income', '1998', 'UT', 'AK', 'MT')
BuildHistogram('Income', 1998, 'UT', 'AK', 'MT')
BuildHistogram('Income', '1998', 'UT', 'AK', 'MT')
require(dplyr)
require(plotly)
require(RColorBrewer)
BuildHistogram <- function(data_type, year, stateOne, stateTwo, stateThree){
edf <- read.csv("./data/EducationData.csv")
cdf <- read.csv("./data/CrimeData.csv")
idf <- read.csv("./data/IncomeRebuild.csv")
#For Changing to xDATE format
yearChoiceX <- paste0("x", year)
#Conditionals for the dataset read in.
if (data_type == "Income") {
df <- filter(idf, code == stateOne| code == stateTwo| code == stateThree ) %>%
select(year)
} else if (data_type == "Education") {
df <- filter(edf, code = stateOne| code == stateTwo | code == stateThree) %>%
select(year)
} else if (data_type == "Crime") {
df <- filter(cdf, Code == stateOne| Code == stateTwo| Code == stateThree, year) %>%
select(Violent.Crime.rate)
colnames(df) <- yearChoiceX
} else {
return (0);
}
#Ploting Bar Chart
plot_ly(df, y = eval(parse(text=yearChoiceX)), type = "bar")
###########TEST######
######################
}
BuildHistogram('School', '1998', 'UT', 'AK', 'MT')
#Deep Data Histogram
#wishmeluck
require(dplyr)
require(plotly)
require(RColorBrewer)
BuildHistogram <- function(data_type, year, stateOne, stateTwo, stateThree){
edf <- read.csv("./data/EducationData.csv")
cdf <- read.csv("./data/CrimeData.csv")
idf <- read.csv("./data/IncomeRebuild.csv")
#For Changing to xDATE format
yearChoiceX <- paste0("x", year)
#Conditionals for the dataset read in.
if (data_type == "Income") {
df <- filter(idf, code == stateOne| code == stateTwo| code == stateThree ) %>%
select(year)
} else if (data_type == "Education") {
df <- filter(edf, code = stateOne| code == stateTwo | code == stateThree) %>%
select(year)
} else if (data_type == "Crime") {
df <- filter(cdf, Code == stateOne| Code == stateTwo| Code == stateThree, year) %>%
select(Violent.Crime.rate)
colnames(df) <- yearChoiceX
} else {
return ('This is not a Supported Data Type');
}
#Ploting Bar Chart
plot_ly(df, y = eval(parse(text=yearChoiceX)), type = "bar")
###########TEST######
##################
BuildHistogram('School', '1998', 'UT', 'AK', 'MT')
BuildHistogram('School', '1998', 'UT', 'AK', 'MT')
#Deep Data Histogram
#wishmeluck
require(dplyr)
require(plotly)
require(RColorBrewer)
BuildHistogram <- function(data_type, year, stateOne, stateTwo, stateThree){
edf <- read.csv("./data/EducationData.csv")
cdf <- read.csv("./data/CrimeData.csv")
idf <- read.csv("./data/IncomeRebuild.csv")
#For Changing to xDATE format
yearChoiceX <- paste0("x", year)
#Conditionals for the dataset read in.
if (data_type == "Income") {
df <- filter(idf, code == stateOne| code == stateTwo| code == stateThree ) %>%
select(year)
} else if (data_type == "Education") {
df <- filter(edf, code = stateOne| code == stateTwo | code == stateThree) %>%
select(year)
} else if (data_type == "Crime") {
df <- filter(cdf, Code == stateOne| Code == stateTwo| Code == stateThree, year) %>%
select(Violent.Crime.rate)
colnames(df) <- yearChoiceX
} else {
return ('This is not a Supported Data Type');
}
#Ploting Bar Chart
plot_ly(df, y = eval(parse(text=yearChoiceX)), type = "bar")
###########TEST######
######################
}
BuildHistogram('School', '1998', 'UT', 'AK', 'MT')
BuildHistogram('Education', '1998', 'UT', 'AK', 'MT')
BuildHistogram('Education', 1998, 'UT', 'AK', 'MT')
TimeAnalysis <- function(stateChoice, dataChoice = '2012') {
library(plotly)
library(dplyr)
# State choice should be in code form but can inclued TOT for total.
# Get all years we will be doing the time analysis for.
years <- c("1992", "1994", "1996", "1998", "2000", "2002", "2004", "2006", "2008", "2010")
yearsnum <- c(1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010)
# Aquire the appropriate data
returnSet <- c()
if (stateChoice == "TOT"){
crimeData <- read.csv("./data/normalCrime.csv") %>% select(Year, mean)
educationData <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
incomeData <- read.csv("./data/normalIncome.csv") %>% select(Year, mean)
# Now we fit the data using the statistics inherent to R
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edufit <- lm(educationData[,2] ~ educationData[,1])
incomefit <- lm(incomeData[,2] ~ incomeData[,1])
crimeName <- paste("Fit: m =", crimefit$coefficients[2])
eduName <- paste("Fit: m =", edufit$coefficients[2])
incomeName <- paste("Fit: m =", incomefit$coefficients[2])
returnSet$crimeGraphic <- plot_ly(x = crimeData[,1], y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = crimeName, line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = educationData[,1], y = educationData[,2], mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = eduName, line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = incomeData[,1], y = incomeData[,2], mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = incomeName, line = list(color = "black"), marker = list(color = "black"))
} else {
crimeData <- read.csv("./data/CrimeData.csv") %>% filter(State != "Total", Year %in% years, Code == stateChoice) %>% select(Year, Violent.Crime.rate)
educationData <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
incomeData <- read.csv("./data/IncomeRebuild.csv") %>% filter(code == stateChoice) %>% select(-x2012, -X)
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edudat <- unlist(educationData[1,1:length(incomeData[1,]) - 1])
edufit <- lm(edudat ~ yearsnum)
incomedat <- rev(unlist(incomeData[1,2:length(incomeData[1,])]))
incomefit <- lm(incomedat ~ yearsnum)
crimeName <- paste("Fit: m =", crimefit$coefficients[2])
eduName <- paste("Fit: m =", edufit$coefficients[2])
incomeName <- paste("Fit: m =", incomefit$coefficients[2])
returnSet$crimeGraphic <- plot_ly(x = yearsnum, y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = crimeName, line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = yearsnum, y = edudat, mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = eduName, line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = yearsnum, y = incomedat, mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = incomeName, line = list(color = "black"), marker = list(color = "black"))
}
if (dataChoice == "Crime"){
return(returnSet$crimeGraphic)
} else if (dataChoice == "Education") {
return(returnSet$eduGraphic)
} else {
return(returnSet$incomeGraphic)
}
#returnSet$crimeCoeff <- crimefit$coefficients
#returnSet$crimeP <- summary(crimefit)$coefficients[2,4]
#returnSet$eduCoeff <- edufit$coefficients
#returnSet$eduP <- summary(edufit)$coefficients[2,4]
#returnSet$incomeCoeff <- incomefit$coefficients
#returnSet$incomeP <- summary(incomefit)$coefficients[2,4]
}
source('~/Documents/UW/Winter 2016/INFO498F/Final/Group-Project/scripts/TimeAnalysis.R', echo=TRUE)
# Time Analysis is a function that takes in a state of choice and interrogates our crime, income, and
# education data sets in order to build a linear regression statistical test for each topic. It returns
# the statistical information related to these tests and graphs that represent them.
TimeAnalysis <- function(stateChoice, dataChoice = '2012') {
library(plotly)
library(dplyr)
# State choice should be in code form but can inclued TOT for total.
# Get all years we will be doing the time analysis for.
years <- c("1992", "1994", "1996", "1998", "2000", "2002", "2004", "2006", "2008", "2010")
yearsnum <- c(1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010)
# Aquire the appropriate data
returnSet <- c()
if (stateChoice == "TOT"){
crimeData <- read.csv("./data/normalCrime.csv") %>% select(Year, mean)
educationData <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
incomeData <- read.csv("./data/normalIncome.csv") %>% select(Year, mean)
# Now we fit the data using the statistics inherent to R
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edufit <- lm(educationData[,2] ~ educationData[,1])
incomefit <- lm(incomeData[,2] ~ incomeData[,1])
crimeName <- paste("Fit: m =", crimefit$coefficients[2])
eduName <- paste("Fit: m =", edufit$coefficients[2])
incomeName <- paste("Fit: m =", incomefit$coefficients[2])
returnSet$crimeGraphic <- plot_ly(x = crimeData[,1], y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = crimeName, line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = educationData[,1], y = educationData[,2], mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = eduName, line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = incomeData[,1], y = incomeData[,2], mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = incomeName, line = list(color = "black"), marker = list(color = "black"))
} else {
crimeData <- read.csv("./data/CrimeData.csv") %>% filter(State != "Total", Year %in% years, Code == stateChoice) %>% select(Year, Violent.Crime.rate)
educationData <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
incomeData <- read.csv("./data/IncomeRebuild.csv") %>% filter(code == stateChoice) %>% select(-x2012, -X)
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edudat <- unlist(educationData[1,1:length(incomeData[1,]) - 1])
edufit <- lm(edudat ~ yearsnum)
incomedat <- rev(unlist(incomeData[1,2:length(incomeData[1,])]))
incomefit <- lm(incomedat ~ yearsnum)
crimeName <- paste("Fit: m =", crimefit$coefficients[2])
eduName <- paste("Fit: m =", edufit$coefficients[2])
incomeName <- paste("Fit: m =", incomefit$coefficients[2])
returnSet$crimeGraphic <- plot_ly(x = yearsnum, y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = crimeName, line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = yearsnum, y = edudat, mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = eduName, line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = yearsnum, y = incomedat, mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = incomeName, line = list(color = "black"), marker = list(color = "black"))
}
if (dataChoice == "Crime"){
return(returnSet$crimeGraphic)
} else if (dataChoice == "Education") {
return(returnSet$eduGraphic)
} else {
return(returnSet$incomeGraphic)
}
#returnSet$crimeCoeff <- crimefit$coefficients
#returnSet$crimeP <- summary(crimefit)$coefficients[2,4]
#returnSet$eduCoeff <- edufit$coefficients
#returnSet$eduP <- summary(edufit)$coefficients[2,4]
#returnSet$incomeCoeff <- incomefit$coefficients
#returnSet$incomeP <- summary(incomefit)$coefficients[2,4]
}
# Time Analysis is a function that takes in a state of choice and interrogates our crime, income, and
# education data sets in order to build a linear regression statistical test for each topic. It returns
# the statistical information related to these tests and graphs that represent them.
TimeAnalysis <- function(stateChoice, dataChoice = '2012') {
library(plotly)
library(dplyr)
# State choice should be in code form but can inclued TOT for total.
# Get all years we will be doing the time analysis for.
years <- c("1992", "1994", "1996", "1998", "2000", "2002", "2004", "2006", "2008", "2010")
yearsnum <- c(1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010)
# Aquire the appropriate data
returnSet <- c()
if (stateChoice == "TOT"){
crimeData <- read.csv("./data/normalCrime.csv") %>% select(Year, mean)
educationData <- read.csv("./data/normalEdu.csv") %>% select(Year, mean)
incomeData <- read.csv("./data/normalIncome.csv") %>% select(Year, mean)
# Now we fit the data using the statistics inherent to R
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edufit <- lm(educationData[,2] ~ educationData[,1])
incomefit <- lm(incomeData[,2] ~ incomeData[,1])
crimeName <- paste("Fit: m =", crimefit$coefficients[2])
eduName <- paste("Fit: m =", edufit$coefficients[2])
incomeName <- paste("Fit: m =", incomefit$coefficients[2])
returnSet$crimeGraphic <- plot_ly(x = crimeData[,1], y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = crimeName, line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = educationData[,1], y = educationData[,2], mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = eduName, line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = incomeData[,1], y = incomeData[,2], mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = incomeName, line = list(color = "black"), marker = list(color = "black"))
} else {
crimeData <- read.csv("./data/CrimeData.csv") %>% filter(State != "Total", Year %in% years, Code == stateChoice) %>% select(Year, Violent.Crime.rate)
educationData <- read.csv("./data/EducationData.csv") %>% filter(code == stateChoice) %>% select(-State, -x2012, -X)
incomeData <- read.csv("./data/IncomeRebuild.csv") %>% filter(code == stateChoice) %>% select(-x2012, -X)
crimefit <- lm(crimeData[,2] ~ crimeData[,1])
edudat <- unlist(educationData[1,1:length(incomeData[1,]) - 1])
edufit <- lm(edudat ~ yearsnum)
incomedat <- rev(unlist(incomeData[1,2:length(incomeData[1,])]))
incomefit <- lm(incomedat ~ yearsnum)
crimeName <- paste("Fit: m =", crimefit$coefficients[2])
eduName <- paste("Fit: m =", edufit$coefficients[2])
incomeName <- paste("Fit: m =", incomefit$coefficients[2])
returnSet$crimeGraphic <- plot_ly(x = yearsnum, y = crimeData[,2], mode = "markers", name = "Crime Data", marker = list(color = "red")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Violent Crime Rate")) %>% add_trace(y = fitted(crimefit), mode = "line", name = crimeName, line = list(color = "black"), marker = list(color = "black"))
returnSet$eduGraphic <- plot_ly(x = yearsnum, y = edudat, mode = "markers", name = "Education Data") %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Education Score")) %>% add_trace(y = fitted(edufit), mode = "line", name = eduName, line = list(color = "black"), marker = list(color = "black"))
returnSet$incomeGraphic <- plot_ly(x = yearsnum, y = incomedat, mode = "markers", name = "Income Data", marker = list(color = "green")) %>% layout(xaxis = list(title = "Year"), yaxis = list(title = "Median Income")) %>% add_trace(y = fitted(incomefit), mode = "line", name = incomeName, line = list(color = "black"), marker = list(color = "black"))
}
if (dataChoice == "Crime"){
return(returnSet$crimeGraphic)
} else if (dataChoice == "Education") {
return(returnSet$eduGraphic)
} else {
return(returnSet$incomeGraphic)
}
#returnSet$crimeCoeff <- crimefit$coefficients
#returnSet$crimeP <- summary(crimefit)$coefficients[2,4]
#returnSet$eduCoeff <- edufit$coefficients
#returnSet$eduP <- summary(edufit)$coefficients[2,4]
#returnSet$incomeCoeff <- incomefit$coefficients
#returnSet$incomeP <- summary(incomefit)$coefficients[2,4]
}
TimeAnalysis('WA')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
